name: Test Stitch for VSCode on MacOS

on:
  workflow_dispatch:
  push:

permissions:
  contents: read
  actions: read
  checks: write

defaults:
  run:
    shell: bash

jobs:
  test-mac:
    runs-on: macos-latest
    steps:
      # Setup
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 18.18.0

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false
      
      - name: pnpm config
        run: |
          pnpm config set pnpm-prefix ~/.pnpm-global
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          rm -f pnpm-lock.yaml

      # Cache for faster tests
      - uses: actions/cache/save@v3
        name: Setup pnpm cache
        if: always()
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-



      # Env vars
      - name: Set Environment Variables
        run: |
          echo "APPDATA=$HOME/.config" >> $GITHUB_ENV
          echo "PROGRAMFILES=/Applications" >> $GITHUB_ENV
          echo "PROGRAMDATA=/Users/Shared/" >> $GITHUB_ENV
          echo "IDEVERSION=2022.300.0.488" >> $GITHUB_ENV
          echo "RUNTIMEVERSION=2022.300.0.478" >> $GITHUB_ENV


      # Install GMS
      - name: Install GMS
        run: |
          curl -L https://gms.yoyogames.com/GameMakerStudio2-$IDEVERSION.pkg -o gms.pkg
          sudo installer -pkg gms.pkg -target /Applications -verbose

      # Install GMS runtime
      - name: Install runtime
        run: |
          PATH_RUNTIME="${PROGRAMDATA}GameMakerStudio2-Beta/Cache/runtimes/runtime-$RUNTIMEVERSION"
          PATH_IGOR_ENTRY="./.github/workflows/rsc_unix/igor-2022.200.0.452/Igor.exe"
          
          "/Library/Frameworks/Mono.framework/Versions/Current/Commands/mono" "$PATH_IGOR_ENTRY" \
            -user=$APPDATA/.config/GameMakerStudio2-Beta/... \
            --runtimePath=$PROGRAMDATA/GameMakerStudio2-Beta/Cache/runtimes \
            --runtimeUrl=https://gms.yoyogames.com/Zeus-Runtime-NuBeta.rss \
            --verbose -- runtime Install $RUNTIMEVERSION

      # Confirm GMS installation
      - name: Confirm runtime installation
        run: |
          sleep 2
          if [ ! -d "${PROGRAMDATA}GameMakerStudio2-Beta" ]; then
            echo "Directory ${PROGRAMDATA}GameMakerStudio2-Beta does not exist."
            exit 1
          fi

          if [ ! -f "${PROGRAMDATA}GameMakerStudio2-Beta/Cache/runtimes/runtime-$RUNTIMEVERSION/bin/Igor.exe" ]; then
            echo "File ${PROGRAMDATA}GameMakerStudio2-Beta/Cache/runtimes/runtime-$RUNTIMEVERSION/bin/Igor.exe does not exist."
            exit 1
          fi


      # Install dependencies
      - run: corepack enable
      - run: pnpm install --filter=bscotch-stitch-vscode...

      # Build depdenencies
      - name: Build
        run: pnpm turbo run build --only --filter=bscotch-stitch-vscode...

      # Run full tests
      - name: test
        # Site and gcdata are not in the scope of this workflow
        run: pnpm turbo run test:auto --filter=\!@bscotch/gcdata... --filter=\!@bscotch/stitch-site... --continue -- --continue=true -p --exit
        env:
          APPDATA: ${{ env.APPDATA }}
          PROGRAMFILES: ${{ env.PROGRAMFILES }}
          PROGRAMDATA: ${{ env.PROGRAMDATA }}

      # Remove unautomatable tests
      - name: Process Test Results
        run: node ./.github/workflows/rsc_unix/filter-unautomatable-test-results.js

      # Report
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Mocha tests            # Name of the check run which will be created
          path: packages/*/test-results.json    # Path to test results
          reporter: mocha-json
          fail-on-error: false
